# -*- coding: utf-8 -*-

"""
Package: iads
Fichier: Classifiers.py
Année: semestre 2 - 2018-2019, Sorbonne Université
"""

# Import de packages externes
import numpy as np
import pandas as pd
import random




# ---------------------------
class Classifier:
    """ Classe pour représenter un classifieur
        Attention: cette classe est une classe abstraite, elle ne peut pas être
        instanciée.
    """

    def __init__(self, input_dimension):
        """ Constructeur de Classifier
            Argument:
                - intput_dimension (int) : dimension d'entrée des exemples
            Hypothèse : input_dimension > 0
        """
        raise NotImplementedError("Please Implement this method")
        
    def predict(self, x):
        """ rend la prediction sur x (-1 ou +1)
        """
        raise NotImplementedError("Please Implement this method")

    def train(self, labeledSet):
        """ Permet d'entrainer le modele sur l'ensemble donné
        """
        
        raise NotImplementedError("Please Implement this method")
    
    def accuracy(self, dataset):
        """ Permet de calculer la qualité du système 
        """
        v = [] 
        for i in range(dataset.size()):
            acc = dataset.getY(i) - self.predict(dataset.getX(i))
            if acc == 0:
                v.append(1) 

        return sum(v) / dataset.size()

# ---------------------------
class ClassifierLineaireRandom(Classifier):
    """ Classe pour représenter un classifieur linéaire aléatoire
        Cette classe hérite de la classe Classifier
    """
    
    def __init__(self, input_dimension):
        """ Constructeur de Classifier
            Argument:
                - intput_dimension (int) : dimension d'entrée des exemples
            Hypothèse : input_dimension > 0
        """
        self.w = np.random.randn(input_dimension)
        
    def predict(self, x):
        """ rend la prediction sur x (-1 ou +1)
        """
        return np.dot(x, self.w)

    def train(self, labeledSet):
        """ Permet d'entrainer le modele sur l'ensemble donné
        """        
        print("Pas d'apprentissage pour ce classifieur")
    
# ---------------------------
class ClassifierKNN(Classifier):
    """ Classe pour représenter un classifieur par K plus proches voisins.
        Cette classe hérite de la classe Classifier
    """

    #TODO: A Compléter
 
    def __init__(self, input_dimension, k):
        """ Constructeur de Classifier
            Argument:
                - intput_dimension (int) : dimension d'entrée des exemples
                - k (int) : nombre de voisins à considérer
            Hypothèse : input_dimension > 0
        """
        self.w = np.random.randn(input_dimension)
        self.k = k
        
    def predict(self, x):
        """ rend la prediction sur x (-1 ou +1)
        """
        distances = []
        classes = []

        for i in range(self.matrix.size()):
            dis = sum((self.matrix.getX(i) - x)**2)
            distances.append(dis)
            classes.append(self.matrix.getY(i)[0])

        sorted_distances = np.argsort(distances)

        resultats = []
        for i in range(self.k):
            resultats.append(classes[sorted_distances[i]])

        if resultats.count(1) > resultats.count(-1):
            return 1
        else:
            return -1

    def train(self, labeledSet):
        """ Permet d'entrainer le modele sur l'ensemble donné
        """        
        self.matrix = labeledSet

# ---------------------------
class ClassifierPerceptronRandom(Classifier):
    def __init__(self, input_dimension):
        """ Argument:
                - input_dimension (int) : dimension d'entrée des exemples
            Hypothèse : input_dimension > 0
        """
        self.w = np.random.rand(input_dimension)

    def predict(self, x):
        """ rend la prediction sur x (-1 ou +1)
        """
        z = np.dot(x, self.w)
        if z > 0:
            return +1
        else:
            return -1
        
    def train(self,labeledSet):
        """ Permet d'entrainer le modele sur l'ensemble donné
        """        
        print("No training needed")
        
class ClassifierPerceptronKernel(Classifier):
    def __init__(self,dimension_kernel,learning_rate,kernel):
        """ Argument:
                - intput_dimension (int) : dimension d'entrée des exemples
                - learning_rate :
            Hypothèse : input_dimension > 0
        """
        self.dimension_kernel=dimension_kernel
        self.learning_rate=learning_rate
        self.kernel=kernel
        self.w= [0]*dimension_kernel
        
    def predict(self,x):
        """ rend la prediction sur x (-1 ou +1)
        """
        z = np.dot(self.kernel.transform(x), self.w)
        if z < 0:
            return -1
        else:
            return +1

    
    def train(self,labeledSet):       
        for i in range(1):
            j=random.randint(0,labeledSet.size()-1)
            x=labeledSet.getX(j)
            y=labeledSet.getY(j)
            if ((self.predict(x)*y)<=0):
                self.w+= self.learning_rate*self.kernel.transform(x)*y
                
    def accuracy(self, dataset):
        """ Permet de calculer la qualité du système 
        """
        cpt=0
        for i in range (dataset.size()):
            if ((self.predict(dataset.getX(i)))==dataset.getY(i)):
                cpt+=1
        return (cpt/dataset.size())
class ClassfierPerceptron(Classifier):
    """ Perceptron de Rosenblatt
    """
    def __init__(self,input_dimension,learning_rate):
        """ Argument:
                - intput_dimension (int) : dimension d'entrée des exemples
                - learning_rate :
            Hypothèse : input_dimension > 0
        """
        self.input_dimension=input_dimension
        self.learning_rate=learning_rate
        self.w=[0]*input_dimension


    def predict(self,x):
        """ rend la prediction sur x (-1 ou +1)
        """
        z = np.dot(x, self.w)
        if z < 0:
            return -1
        else:
            return +1

    
    def train(self,labeledSet):
        """ Permet d'entrainer le modele sur l'ensemble donné
        """
        
        for i in range(1):
            j=random.randint(0,labeledSet.size()-1)
            x=labeledSet.getX(j)
            y=labeledSet.getY(j)
            if ((self.predict(x)*y)<0):
                self.w+= self.learning_rate*x*y
    def accuracy(self, dataset):
        """ Permet de calculer la qualité du système 
        """
        cpt=0
        for i in range (dataset.size()):
            if ((self.predict(dataset.getX(i)))==dataset.getY(i)):
                cpt+=1
        return (cpt/dataset.size())
